
Super324P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000003b0  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020d  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a5  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000017dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b3  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026d  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 eb       	ldi	r30, 0xB0	; 176
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 34       	cpi	r26, 0x40	; 64
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e4       	ldi	r26, 0x40	; 64
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 34       	cpi	r26, 0x40	; 64
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  b2:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <init_74HC595>:
*************************/


void init_74HC595()
{
	DATA_DDR = 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 b9       	out	0x01, r24	; 1
	CONTROL_DDR = 0xff;
  be:	84 b9       	out	0x04, r24	; 4
	setHigh(CONTROL_PORT,SCL);
  c0:	29 9a       	sbi	0x05, 1	; 5
	setLow(CONTROL_PORT,BLANK);
  c2:	2b 98       	cbi	0x05, 3	; 5
}
  c4:	08 95       	ret

000000c6 <SCK_pulse>:

void SCK_pulse()
{
	setHigh(CONTROL_PORT,SCK);
  c6:	28 9a       	sbi	0x05, 0	; 5
	setLow(CONTROL_PORT,SCK);
  c8:	28 98       	cbi	0x05, 0	; 5
}
  ca:	08 95       	ret

000000cc <RCK_pulse>:


void RCK_pulse()
{
	setHigh(CONTROL_PORT,RCK);
  cc:	2a 9a       	sbi	0x05, 2	; 5
	setLow(CONTROL_PORT,RCK);
  ce:	2a 98       	cbi	0x05, 2	; 5
}
  d0:	08 95       	ret

000000d2 <update_storage_reg>:

void update_storage_reg()
{
	RCK_pulse();
  d2:	0e 94 66 00 	call	0xcc	; 0xcc <RCK_pulse>
}
  d6:	08 95       	ret

000000d8 <clear_shift_reg>:

void clear_shift_reg()
{
	setLow(CONTROL_PORT,SCL);
  d8:	29 98       	cbi	0x05, 1	; 5
	setHigh(CONTROL_PORT,SCL);
  da:	29 9a       	sbi	0x05, 1	; 5
}
  dc:	08 95       	ret

000000de <clear_all>:

void clear_all()
{
	clear_shift_reg();
  de:	0e 94 6c 00 	call	0xd8	; 0xd8 <clear_shift_reg>
	update_storage_reg();
  e2:	0e 94 69 00 	call	0xd2	; 0xd2 <update_storage_reg>
}
  e6:	08 95       	ret

000000e8 <blank_enable>:

void blank_enable()
{
	setLow(CONTROL_PORT,BLANK);
  e8:	2b 98       	cbi	0x05, 3	; 5
}
  ea:	08 95       	ret

000000ec <blank_disable>:

void blank_disable()
{
	setHigh(CONTROL_PORT,BLANK);
  ec:	2b 9a       	sbi	0x05, 3	; 5
}
  ee:	08 95       	ret

000000f0 <write_bit>:

void write_bit(uint8_t data) //8 * 1bit
{
	DATA_PORT=data;
  f0:	82 b9       	out	0x02, r24	; 2
	SCK_pulse();
  f2:	0e 94 63 00 	call	0xc6	; 0xc6 <SCK_pulse>
}
  f6:	08 95       	ret

000000f8 <write_7bits>:


void write_7bits(REG_DATA data)
{
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	28 97       	sbiw	r28, 0x08	; 8
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	29 83       	std	Y+1, r18	; 0x01
 116:	3a 83       	std	Y+2, r19	; 0x02
 118:	4b 83       	std	Y+3, r20	; 0x03
 11a:	5c 83       	std	Y+4, r21	; 0x04
 11c:	6d 83       	std	Y+5, r22	; 0x05
 11e:	7e 83       	std	Y+6, r23	; 0x06
 120:	8f 83       	std	Y+7, r24	; 0x07
 122:	98 87       	std	Y+8, r25	; 0x08
 124:	8e 01       	movw	r16, r28
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
	DATA_PORT=data;
	SCK_pulse();
}


void write_7bits(REG_DATA data)
 12a:	ee 24       	eor	r14, r14
 12c:	ff 24       	eor	r15, r15
 12e:	68 94       	set
 130:	e3 f8       	bld	r14, 3
 132:	ec 0e       	add	r14, r28
 134:	fd 1e       	adc	r15, r29
{
	uint8_t i;
	for(i=0;i<7;i++)
	{
		write_bit(data.array[i]);
 136:	f8 01       	movw	r30, r16
 138:	81 91       	ld	r24, Z+
 13a:	8f 01       	movw	r16, r30
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <write_bit>


void write_7bits(REG_DATA data)
{
	uint8_t i;
	for(i=0;i<7;i++)
 140:	0e 15       	cp	r16, r14
 142:	1f 05       	cpc	r17, r15
 144:	c1 f7       	brne	.-16     	; 0x136 <write_7bits+0x3e>
	{
		write_bit(data.array[i]);
	}
}
 146:	28 96       	adiw	r28, 0x08	; 8
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <write_byte>:


void write_byte(REG_DATA data)
{
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	28 97       	sbiw	r28, 0x08	; 8
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	29 83       	std	Y+1, r18	; 0x01
 17e:	3a 83       	std	Y+2, r19	; 0x02
 180:	4b 83       	std	Y+3, r20	; 0x03
 182:	5c 83       	std	Y+4, r21	; 0x04
 184:	6d 83       	std	Y+5, r22	; 0x05
 186:	7e 83       	std	Y+6, r23	; 0x06
 188:	8f 83       	std	Y+7, r24	; 0x07
 18a:	98 87       	std	Y+8, r25	; 0x08
 18c:	8e 01       	movw	r16, r28
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	1f 4f       	sbci	r17, 0xFF	; 255
		write_bit(data.array[i]);
	}
}


void write_byte(REG_DATA data)
 192:	0f 2e       	mov	r0, r31
 194:	f9 e0       	ldi	r31, 0x09	; 9
 196:	ef 2e       	mov	r14, r31
 198:	ff 24       	eor	r15, r15
 19a:	f0 2d       	mov	r31, r0
 19c:	ec 0e       	add	r14, r28
 19e:	fd 1e       	adc	r15, r29
{
	uint8_t i;
	for(i=0;i<8;i++)
	{
		write_bit(data.array[i]);
 1a0:	f8 01       	movw	r30, r16
 1a2:	81 91       	ld	r24, Z+
 1a4:	8f 01       	movw	r16, r30
 1a6:	0e 94 78 00 	call	0xf0	; 0xf0 <write_bit>


void write_byte(REG_DATA data)
{
	uint8_t i;
	for(i=0;i<8;i++)
 1aa:	0e 15       	cp	r16, r14
 1ac:	1f 05       	cpc	r17, r15
 1ae:	c1 f7       	brne	.-16     	; 0x1a0 <write_byte+0x40>
	{
		write_bit(data.array[i]);
	}
}
 1b0:	28 96       	adiw	r28, 0x08	; 8
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <cube2reg_data>:

REG_DATA cube2reg_data(CUBE x)
{
 1ca:	af 92       	push	r10
 1cc:	bf 92       	push	r11
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	68 97       	sbiw	r28, 0x18	; 24
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	29 8b       	std	Y+17, r18	; 0x11
 1ee:	3a 8b       	std	Y+18, r19	; 0x12
 1f0:	4b 8b       	std	Y+19, r20	; 0x13
 1f2:	5c 8b       	std	Y+20, r21	; 0x14
 1f4:	6d 8b       	std	Y+21, r22	; 0x15
 1f6:	7e 8b       	std	Y+22, r23	; 0x16
 1f8:	8f 8b       	std	Y+23, r24	; 0x17
 1fa:	98 8f       	std	Y+24, r25	; 0x18
	for(i=0;i<8;i++)
	{
		t=0;
		for(j=0;j<8;j++)
		{
			if(check(x.p[j],i))
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f9 e0       	ldi	r31, 0x09	; 9
 200:	ef 2e       	mov	r14, r31
 202:	ff 24       	eor	r15, r15
 204:	f0 2d       	mov	r31, r0
 206:	ec 0e       	add	r14, r28
 208:	fd 1e       	adc	r15, r29
 20a:	00 e0       	ldi	r16, 0x00	; 0
 20c:	10 e0       	ldi	r17, 0x00	; 0

REG_DATA cube2reg_data(CUBE x)
{
	REG_DATA y;
	uint8_t t,i,j;
	for(i=0;i<8;i++)
 20e:	a1 e0       	ldi	r26, 0x01	; 1
 210:	b0 e0       	ldi	r27, 0x00	; 0
	{
		t=0;
		for(j=0;j<8;j++)
		{
			if(check(x.p[j],i))
 212:	aa 24       	eor	r10, r10
 214:	bb 24       	eor	r11, r11
 216:	dd 24       	eor	r13, r13
 218:	1b c0       	rjmp	.+54     	; 0x250 <cube2reg_data+0x86>
 21a:	81 91       	ld	r24, Z+
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	86 23       	and	r24, r22
 220:	97 23       	and	r25, r23
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	41 f0       	breq	.+16     	; 0x236 <cube2reg_data+0x6c>
			setHigh(t,j);
 226:	cd 01       	movw	r24, r26
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <cube2reg_data+0x66>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <cube2reg_data+0x62>
 234:	48 2b       	or	r20, r24
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
	REG_DATA y;
	uint8_t t,i,j;
	for(i=0;i<8;i++)
	{
		t=0;
		for(j=0;j<8;j++)
 23a:	28 30       	cpi	r18, 0x08	; 8
 23c:	31 05       	cpc	r19, r1
 23e:	69 f7       	brne	.-38     	; 0x21a <cube2reg_data+0x50>
		{
			if(check(x.p[j],i))
			setHigh(t,j);
		}
		y.array[i]=t;
 240:	f7 01       	movw	r30, r14
 242:	41 93       	st	Z+, r20
 244:	7f 01       	movw	r14, r30
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255

REG_DATA cube2reg_data(CUBE x)
{
	REG_DATA y;
	uint8_t t,i,j;
	for(i=0;i<8;i++)
 24a:	08 30       	cpi	r16, 0x08	; 8
 24c:	11 05       	cpc	r17, r1
 24e:	61 f0       	breq	.+24     	; 0x268 <cube2reg_data+0x9e>
 250:	bd 01       	movw	r22, r26
 252:	00 2e       	mov	r0, r16
 254:	02 c0       	rjmp	.+4      	; 0x25a <cube2reg_data+0x90>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <cube2reg_data+0x8c>
 25e:	fe 01       	movw	r30, r28
 260:	71 96       	adiw	r30, 0x11	; 17
	{
		t=0;
		for(j=0;j<8;j++)
		{
			if(check(x.p[j],i))
 262:	95 01       	movw	r18, r10
 264:	4d 2d       	mov	r20, r13
 266:	d9 cf       	rjmp	.-78     	; 0x21a <cube2reg_data+0x50>
			setHigh(t,j);
		}
		y.array[i]=t;
	}
	return y;
 268:	de 01       	movw	r26, r28
 26a:	11 96       	adiw	r26, 0x01	; 1
 26c:	fe 01       	movw	r30, r28
 26e:	39 96       	adiw	r30, 0x09	; 9
 270:	88 e0       	ldi	r24, 0x08	; 8
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	81 50       	subi	r24, 0x01	; 1
 278:	e1 f7       	brne	.-8      	; 0x272 <cube2reg_data+0xa8>
 27a:	29 81       	ldd	r18, Y+1	; 0x01
 27c:	3a 81       	ldd	r19, Y+2	; 0x02
 27e:	4b 81       	ldd	r20, Y+3	; 0x03
 280:	5c 81       	ldd	r21, Y+4	; 0x04
 282:	6d 81       	ldd	r22, Y+5	; 0x05
 284:	7e 81       	ldd	r23, Y+6	; 0x06
}
 286:	8f 81       	ldd	r24, Y+7	; 0x07
 288:	98 85       	ldd	r25, Y+8	; 0x08
 28a:	68 96       	adiw	r28, 0x18	; 24
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	bf 90       	pop	r11
 2a6:	af 90       	pop	r10
 2a8:	08 95       	ret

000002aa <mode_00>:




void mode_00()
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	c0 55       	subi	r28, 0x50	; 80
 2b4:	d0 40       	sbci	r29, 0x00	; 0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
	int i,n=8;
	CUBE x[]={
 2c0:	de 01       	movw	r26, r28
 2c2:	19 96       	adiw	r26, 0x09	; 9
 2c4:	e0 e0       	ldi	r30, 0x00	; 0
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	01 90       	ld	r0, Z+
 2cc:	0d 92       	st	X+, r0
 2ce:	81 50       	subi	r24, 0x01	; 1
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <mode_00+0x20>
		{0x7f,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x40},
		{0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,0x80}
		};
		while(1)
		{
			for(i=0;i<n;i++)
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	10 e0       	ldi	r17, 0x00	; 0
			{
				write_7bits(cube2reg_data(x[i]));
 2d6:	4e 01       	movw	r8, r28
 2d8:	08 94       	sec
 2da:	81 1c       	adc	r8, r1
 2dc:	91 1c       	adc	r9, r1
 2de:	0f 2e       	mov	r0, r31
 2e0:	f9 e4       	ldi	r31, 0x49	; 73
 2e2:	6f 2e       	mov	r6, r31
 2e4:	77 24       	eor	r7, r7
 2e6:	f0 2d       	mov	r31, r0
 2e8:	6c 0e       	add	r6, r28
 2ea:	7d 1e       	adc	r7, r29
 2ec:	f8 2c       	mov	r15, r8
 2ee:	e9 2c       	mov	r14, r9
 2f0:	d6 2c       	mov	r13, r6
 2f2:	c7 2c       	mov	r12, r7
 2f4:	bb 24       	eor	r11, r11
 2f6:	68 94       	set
 2f8:	b3 f8       	bld	r11, 3
		{0x7f,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x40},
		{0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,0x80}
		};
		while(1)
		{
			for(i=0;i<n;i++)
 2fa:	44 24       	eor	r4, r4
 2fc:	55 24       	eor	r5, r5
			{
				write_7bits(cube2reg_data(x[i]));
 2fe:	d8 01       	movw	r26, r16
 300:	aa 0f       	add	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	aa 0f       	add	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	aa 0f       	add	r26, r26
 30a:	bb 1f       	adc	r27, r27
 30c:	a8 0d       	add	r26, r8
 30e:	b9 1d       	adc	r27, r9
 310:	fd 01       	movw	r30, r26
 312:	38 96       	adiw	r30, 0x08	; 8
 314:	18 96       	adiw	r26, 0x08	; 8
 316:	2c 91       	ld	r18, X
 318:	31 81       	ldd	r19, Z+1	; 0x01
 31a:	42 81       	ldd	r20, Z+2	; 0x02
 31c:	53 81       	ldd	r21, Z+3	; 0x03
 31e:	64 81       	ldd	r22, Z+4	; 0x04
 320:	75 81       	ldd	r23, Z+5	; 0x05
 322:	86 81       	ldd	r24, Z+6	; 0x06
 324:	97 81       	ldd	r25, Z+7	; 0x07
 326:	0e 94 e5 00 	call	0x1ca	; 0x1ca <cube2reg_data>
 32a:	d3 01       	movw	r26, r6
 32c:	2c 93       	st	X, r18
 32e:	2b 96       	adiw	r28, 0x0b	; 11
 330:	3f af       	sts	0x7f, r19
 332:	2b 97       	sbiw	r28, 0x0b	; 11
 334:	2c 96       	adiw	r28, 0x0c	; 12
 336:	4f af       	sts	0x7f, r20
 338:	2c 97       	sbiw	r28, 0x0c	; 12
 33a:	2d 96       	adiw	r28, 0x0d	; 13
 33c:	5f af       	sts	0x7f, r21
 33e:	2d 97       	sbiw	r28, 0x0d	; 13
 340:	2e 96       	adiw	r28, 0x0e	; 14
 342:	6f af       	sts	0x7f, r22
 344:	2e 97       	sbiw	r28, 0x0e	; 14
 346:	2f 96       	adiw	r28, 0x0f	; 15
 348:	7f af       	sts	0x7f, r23
 34a:	2f 97       	sbiw	r28, 0x0f	; 15
 34c:	60 96       	adiw	r28, 0x10	; 16
 34e:	8f af       	sts	0x7f, r24
 350:	60 97       	sbiw	r28, 0x10	; 16
 352:	61 96       	adiw	r28, 0x11	; 17
 354:	9f af       	sts	0x7f, r25
 356:	61 97       	sbiw	r28, 0x11	; 17
 358:	ef 2d       	mov	r30, r15
 35a:	fe 2d       	mov	r31, r14
 35c:	ad 2d       	mov	r26, r13
 35e:	bc 2d       	mov	r27, r12
 360:	8b 2d       	mov	r24, r11
 362:	0d 90       	ld	r0, X+
 364:	01 92       	st	Z+, r0
 366:	81 50       	subi	r24, 0x01	; 1
 368:	e1 f7       	brne	.-8      	; 0x362 <mode_00+0xb8>
 36a:	29 81       	ldd	r18, Y+1	; 0x01
 36c:	3a 81       	ldd	r19, Y+2	; 0x02
 36e:	4b 81       	ldd	r20, Y+3	; 0x03
 370:	5c 81       	ldd	r21, Y+4	; 0x04
 372:	6d 81       	ldd	r22, Y+5	; 0x05
 374:	7e 81       	ldd	r23, Y+6	; 0x06
 376:	8f 81       	ldd	r24, Y+7	; 0x07
 378:	98 85       	ldd	r25, Y+8	; 0x08
 37a:	0e 94 7c 00 	call	0xf8	; 0xf8 <write_7bits>
				update_storage_reg();
 37e:	0e 94 69 00 	call	0xd2	; 0xd2 <update_storage_reg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 382:	8f e3       	ldi	r24, 0x3F	; 63
 384:	92 e4       	ldi	r25, 0x42	; 66
 386:	af e0       	ldi	r26, 0x0F	; 15
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	a0 40       	sbci	r26, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <mode_00+0xde>
 390:	00 c0       	rjmp	.+0      	; 0x392 <mode_00+0xe8>
 392:	00 00       	nop
		{0x7f,0x00,0x7f,0x00,0x7f,0x00,0x7f,0x40},
		{0x00,0x7f,0x00,0x7f,0x00,0x7f,0x00,0x80}
		};
		while(1)
		{
			for(i=0;i<n;i++)
 394:	0f 5f       	subi	r16, 0xFF	; 255
 396:	1f 4f       	sbci	r17, 0xFF	; 255
 398:	08 30       	cpi	r16, 0x08	; 8
 39a:	11 05       	cpc	r17, r1
 39c:	0c f4       	brge	.+2      	; 0x3a0 <mode_00+0xf6>
 39e:	af cf       	rjmp	.-162    	; 0x2fe <mode_00+0x54>
 3a0:	82 01       	movw	r16, r4
 3a2:	ad cf       	rjmp	.-166    	; 0x2fe <mode_00+0x54>

000003a4 <main>:
		}		
}

int main()
{
	init_74HC595();
 3a4:	0e 94 5d 00 	call	0xba	; 0xba <init_74HC595>
	mode_00();
 3a8:	0e 94 55 01 	call	0x2aa	; 0x2aa <mode_00>

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
